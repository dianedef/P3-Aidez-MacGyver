
         # RESSOURCES #

   [Téléchargez [.zip - 387ko]](https://s3-eu-west-1.amazonaws.com/course.oc-static.com/projects/macgyver_ressources.zip)
   MacGyver : ![](https://user.oc-static.com/upload/2017/04/21/14927753100739_macgyver-32-43.png)
   Gardien : ![](https://user.oc-static.com/upload/2017/04/21/14927753225921_murdoc-32.png)


         # A FAIRE #

   V Enregistrement du labyrinthe du jeu dans un fichier structure modifiable (départ, emplacement des murs, arrivée)

   O Répartir aléatoirement les objets dans le labyrinthe à chaque (ré)ouverture du jeu.
   O Animer le personnage MacGyver
   O Ne pas mélanger le code qui va représenter les objets, celui qui va faire des prints et celui qui va faire des inputs

   O Récupérer les objets en se déplaçant dessus
   O Créer la fonction exit

   O Utiliser le module pygame pour dessiner l'interface graphique
      La fenêtre du jeu sera un carré pouvant afficher 15 sprites sur la longueur.
      MacGyver sera contrôlé par les touches directionnelles du clavier
   O Traduire les commentaires en anglais
   O Le programme doit être standalone

   /12/12 modification de la méthode spéciale comparative de position, des positions des items, player & garde,


         # DOCUMENT TEXTE EXPLIQUANT MA DEMARCHE #

Le document doit être en format pdf et ne pas excéder 2 pages A4.
Compétences évaluées:
   Lire et comprendre une documentation de module
   Gérer les différentes versions de Python et ses modules en fonction des projets
   Créer des scripts pour le web en utilisant Python
   Utiliser un algorithme pour résoudre un besoin technique
   Coder efficacement en utilisant les outils adéquats
   Conceptualiser l'ensemble de son application en décrivant sa structure (Entités / Domain Objects)

Le lien du projet sur Github : https://github.com/dianedef/P3-Aidez-MacGyver

Choix de l'algorithme : pourquoi ?

Difficultés rencontrées ?

- Comment comparer des positions et vérifier leur collisions
- Comment déplacer McGyver ?


Solutions trouvées ?

- Utilisation de la méthode spéciale repr et eq


Démarche

- Création d'une classe position qui sera partagée par tous les objets et pourra faire l'objet de méthodes
- Passage en MVC avec des sous packages
  le model c'est toutes les classes qui ne dépendent pas d'une interface graphique ou d'un mode de saisi en particulier, un model pour chaque classe avec le principe de responsabilité unique. Pour que soit bien de la POO et pas du code procédure regroupée dans une seule classe !
- Structure d'import qui part de la racine donc on doit modifier l'import quand on passe des modules dans des packages
ajout du fichier __init__.py dans chaque package

- Test de la classe position qui fonctionne pour faire avancer un objet en fonction d'un input, OK
- Toutes les classes de models sont OK